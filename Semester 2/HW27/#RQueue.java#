//Arpita Abrol, Jimbelung Barker
//APCS2 pd10
//HW27 -- Now Let's Consider You Lot at Fake Terry's
//2016-04-06

/*****************************************************
 * class RQueue
 * A linked-list-based, randomized queue
 * (a collection with FIIDKO property)
 *
 *       -------------------------------
 *   end |  --->   Q U E U E   --->    | front
 *       -------------------------------
 *
 *  linked list points opposite direction for O(1) en/dequeuing
 *            N <- N <- ... <- N <- N
 *      _end -^                     ^- _front
 *
 ******************************************************/

import java.util.*;

public class RQueue<T> implements Queue<T> {

    private LLNode<T> _front, _end;
    private int _size;


    // default constructor creates an empty queue
    public RQueue(){
	_size = 0;
    }//end default constructor


    public void enqueue( T enQVal ) {
	LLNode<T> val = new LLNode<T>(enQVal, null);
	if( isEmpty() ) {
	    _front = val;
	    _end = _front;
	    _front.setNext(_end);
	}
	else {
	    _end.setNext(val);
	    _end = val;
	}
	_size++;
    }//end enqueue()


    // remove and return thing at front of queue
    // assume _queue ! empty
    public T dequeue() {
	if( isEmpty() ) {
	    throw new NoSuchElementException("The queue is empty");
	}
	else {
	    LLNode<T> temp = _front;
	    _front = _front.getNext();
	    _size--;
	    return temp.getValue();
	}
    }//end dequeue()


    public T peekFront() {
	return _front.getValue();
    }


    /******************************************
     * void sample() -- a means of "shuffling" the queue
     * Algo:
     * ...
     * 
     ******************************************/
    public void sample (){
	_end.setNext(_front);
        int random = (int)(Math.random() * _size+1);
        for( ; random > 0; random-- ){
            _front = _front.getNext();
	    _end = _end.getNext();
        }
	_end.setNext(null);
    }//end sample()


    public boolean isEmpty(){
	return (_size == 0);
    } //O(?)


    // print each node, separated by spaces
    public String toString(){
	LLNode<T> current = _front;
	String all = "" + current.getValue();
	for( int i = 1; i < _size; i++ ) {
	    current = current.getNext();
	    all += " " + current.getValue();
	}
	return all;
    }//end toString()



    //main method for testing
    public static void main( String[] args ) {

	

	Queue<String> PirateQueue = new RQueue<String>();

	System.out.println("\nnow enqueuing..."); 
	PirateQueue.enqueue("Dread");
	PirateQueue.enqueue("Pirate");
	PirateQueue.enqueue("Roberts");
	PirateQueue.enqueue("Blackbeard");
	PirateQueue.enqueue("Peter");
	PirateQueue.enqueue("Stuyvesant");

	System.out.println("\nnow testing toString()..."); 
	System.out.println( PirateQueue ); //for testing toString()...

	System.out.println("\nnow dequeuing..."); 
	System.out.println( PirateQueue.dequeue() );
	System.out.println( PirateQueue.dequeue() );
	System.out.println( PirateQueue.dequeue() );
	System.out.println( PirateQueue.dequeue() );
	System.out.println( PirateQueue.dequeue() );
	System.out.println( PirateQueue.dequeue() );

	System.out.println("\nnow dequeuing fr empty queue..."); 
	System.out.println( PirateQueue.dequeue() );
/*v~~~~~~~~~~~~~~MAKE MORE~~~~~~~~~~~~~~v
	^~~~~~~~~~~~~~~~AWESOME~~~~~~~~~~~~~~~^*/

    }//end main

}//end class RQueue
